[project]
name = "minimidl"
version = "0.1.0"
description = "Modern Interface Notation INterpreter for Multi-language Implementation Definition Language"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [
    { name = "MinimIDL Contributors" }
]
keywords = ["idl", "code-generation", "c++", "swift", "interface", "bindings"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Compilers",
]
dependencies = [
    "lark>=1.1.9",
    "pydantic>=2.10.5",
    "typer>=0.15.1",
    "jinja2>=3.1.5",
    "loguru>=0.7.3",
]

[project.urls]
Homepage = "https://github.com/yourusername/minimidl"
Repository = "https://github.com/yourusername/minimidl"
Documentation = "https://minimidl.readthedocs.io"
Issues = "https://github.com/yourusername/minimidl/issues"

[project.scripts]
minimidl = "minimidl.cli:main"

[project.optional-dependencies]
dev = [
    "black[d]>=24.10.0",
    "ruff>=0.8.6",
    "isort>=5.13.2",
    "pylint>=3.3.3",
    "mypy>=1.14.1",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "mkdocs-material>=9.5.50",
    "mkdocstrings[python]>=0.27.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["minimidl"]

[tool.black]
line-length = 88
target-version = ['py313']

[tool.isort]
profile = "black"
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "C90",  # mccabe
    "T20",  # flake8-print
    "Q",    # flake8-quotes
    "RUF",  # ruff-specific rules
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers"

[tool.coverage.run]
source = ["minimidl"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]