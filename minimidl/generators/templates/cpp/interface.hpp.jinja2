// Generated by MinimIDL
// DO NOT EDIT - This file was automatically generated
#pragma once

#include <memory>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <cstdint>
#include "minimidl_runtime.hpp"

{% for namespace in namespaces %}
namespace {{ namespace.name }} {

{% for forward_decl in namespace.forward_declarations %}
class {{ forward_decl.name }};
{% endfor %}

{% for enum in namespace.enums %}
enum class {{ enum.name }} : {{ enum.backing_type }} {
    {% for value in enum.values %}
    {{ value.name }} = {{ value.value | render_expression }},
    {% endfor %}
};

{% endfor %}
{% for typedef in namespace.typedefs %}
using {{ typedef.name }} = {{ typedef.type | cpp_type }};
{% endfor %}

{% for constant in namespace.constants %}
constexpr {{ constant.constant_value.type }} {{ constant.name }} = {{ constant.constant_value.value | render_expression }};
{% endfor %}

{% for interface in namespace.interfaces %}
class {{ interface.name }} {
public:
    virtual ~{{ interface.name }}() = default;
    
    {% for property in interface.properties %}
    {% if property.writable %}
    virtual {{ property.type | cpp_type }} get_{{ property.name }}() const = 0;
    virtual void set_{{ property.name }}({{ property.type | cpp_param_type }} value) = 0;
    {% else %}
    virtual {{ property.type | cpp_type }} get_{{ property.name }}() const = 0;
    {% endif %}
    {% endfor %}
    
    {% for method in interface.methods %}
    virtual {{ method.return_type | cpp_type }} {{ method.name }}(
        {%- for param in method.parameters -%}
        {{ param.type | cpp_param_type }} {{ param.name }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ) = 0;
    {% endfor %}
};

{% endfor %}
} // namespace {{ namespace.name }}
{% endfor %}