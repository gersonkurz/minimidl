# {{ namespace.name }} Swift Package

This package provides Swift bindings for the {{ namespace.name }} API, generated by MinimIDL.

## Installation

### Swift Package Manager

Add this package to your `Package.swift` dependencies:

```swift
dependencies: [
    .package(path: "path/to/{{ namespace.name }}")
]
```

And add `{{ namespace.name }}` to your target dependencies:

```swift
.target(
    name: "YourTarget",
    dependencies: ["{{ namespace.name }}"])
```

## Prerequisites

The C wrapper library must be installed on your system. You can install it via:

- **Homebrew (macOS)**: `brew install {{ namespace.name.lower() }}_wrapper`
- **APT (Ubuntu/Debian)**: `apt install lib{{ namespace.name.lower() }}-wrapper-dev`
- **From source**: Build and install the C wrapper library

## Usage

```swift
import {{ namespace.name }}

{% if namespace.interfaces %}
// Create an instance
let obj = {{ namespace.interfaces[0].name | swift_class_name }}()

// Access properties
{% for prop in namespace.interfaces[0].properties[:2] %}
{% if prop.type | is_string %}
print(obj.{{ prop.name }}) // String property
{% elif prop.type | is_primitive %}
print(obj.{{ prop.name }}) // {{ prop.type | swift_type }} property
{% endif %}
{% endfor %}

// Call methods
{% for method in namespace.interfaces[0].methods[:1] %}
obj.{{ method.name }}({% for param in method.parameters %}{{ param.name }}: value{% if not loop.last %}, {% endif %}{% endfor %})
{% endfor %}
{% endif %}
```

## API Reference

{% for interface in namespace.interfaces %}
### {{ interface.name | swift_class_name }}

{{ interface.name }} wrapper class.

#### Properties

{% for property in interface.properties %}
- `{{ property.name }}: {{ property.type | swift_type }}`{% if property.writable %} (read/write){% else %} (read-only){% endif %}
{% endfor %}

#### Methods

{% for method in interface.methods %}
- `func {{ method.name }}({% for param in method.parameters %}{{ param.name }}: {{ param.type | swift_type }}{% if not loop.last %}, {% endif %}{% endfor %}){% if method.return_type.name != "void" %} -> {{ method.return_type | swift_type }}{% endif %}`
{% endfor %}

{% endfor %}

{% if namespace.enums %}
### Enumerations

{% for enum in namespace.enums %}
#### {{ enum.name }}

```swift
public enum {{ enum.name }}: {{ enum.backing_type | swift_type }} {
    {% for value in enum.values %}
    case {{ value.name | lower }}
    {% endfor %}
}
```

{% endfor %}
{% endif %}

## Error Handling

Check for errors using:

```swift
if let error = getLastError() {
    print("Error: \(error)")
    clearError()
}
```

## Generated Code

This package was automatically generated by MinimIDL. Do not edit the generated files directly.

## License

See the parent project's license.