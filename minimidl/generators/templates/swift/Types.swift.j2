// Generated by MinimIDL - Swift Type Definitions
// DO NOT EDIT - This file was automatically generated

import Foundation
import {{ namespace.name }}C

{% for enum in namespace.enums %}
/// {{ enum.name }} enumeration
public enum {{ enum.name }}: {{ enum.backing_type | swift_type }}, CaseIterable {
    {% for value in enum.values %}
    case {{ value.name | lower }} = {{ value.value | render_expression }}
    {% endfor %}
    
    /// Initialize from C value
    public init?(cValue: {{ namespace.name }}_{{ enum.name }}) {
        self.init(rawValue: Int32(cValue.rawValue))
    }
    
    /// Get C value
    public var cValue: {{ namespace.name }}_{{ enum.name }} {
        return {{ namespace.name }}_{{ enum.name }}(rawValue: CInt(self.rawValue))!
    }
}

{% endfor %}
{% for typedef in namespace.typedefs %}
/// {{ typedef.name }} type alias
{% if typedef.type | is_primitive %}
public typealias {{ typedef.name }} = {{ typedef.type | swift_type }}
{% elif typedef.type | is_array %}
public typealias {{ typedef.name }} = {{ typedef.type | swift_type }}
{% elif typedef.type | is_dict %}
public typealias {{ typedef.name }} = {{ typedef.type | swift_type }}
{% elif typedef.type | is_set %}
public typealias {{ typedef.name }} = {{ typedef.type | swift_type }}
{% else %}
// TODO: Complex typedef {{ typedef.name }} = {{ typedef.type }}
{% endif %}

{% endfor %}
{% for constant in namespace.constants %}
/// {{ constant.name }} constant
public let {{ constant.name }}: {{ constant.constant_value.type | swift_type }} = {{ constant.constant_value.value | render_expression }}

{% endfor %}
// MARK: - Error Handling

/// Get the last error message from the C API
public func getLastError() -> String? {
    guard let cString = {{ namespace.name }}_GetLastError() else {
        return nil
    }
    let error = String(cString: cString)
    return error.isEmpty ? nil : error
}

/// Clear the last error
public func clearError() {
    {{ namespace.name }}_ClearError()
}