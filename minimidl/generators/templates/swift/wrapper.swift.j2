// Generated by MinimIDL - Swift Wrapper
// DO NOT EDIT - This file was automatically generated

import Foundation
import {{ namespace.name }}C

{% for interface in namespace.interfaces %}
/// {{ interface.name }} wrapper class
public class {{ interface.name | swift_class_name }} {
    internal let handle: OpaquePointer
    private var isOwned: Bool
    
    /// Initialize with a new instance
    public init() {
        guard let h = {{ interface.name }}_Create() else {
            fatalError("Failed to create {{ interface.name }} instance")
        }
        self.handle = h
        self.isOwned = true
    }
    
    /// Initialize with existing handle (does not take ownership)
    internal init(handle: OpaquePointer) {
        self.handle = handle
        self.isOwned = false
        {{ interface.name }}_AddRef(handle)
    }
    
    deinit {
        if isOwned {
            {{ interface.name }}_Release(handle)
        }
    }
    
    {% for property in interface.properties %}
    /// {{ property.name }} property
    {% if property.type | is_primitive %}
    public var {{ property.name }}: {{ property.type | swift_type }} {
        {% if property.writable %}
        get {
            return {{ interface.name | c_function_name(property.name, "Get") }}(handle)
        }
        set {
            {{ interface.name | c_function_name(property.name, "Set") }}(handle, newValue)
        }
        {% else %}
        return {{ interface.name | c_function_name(property.name, "Get") }}(handle)
        {% endif %}
    }
    {% elif property.type | is_string %}
    public var {{ property.name }}: {{ property.type | swift_type }} {
        {% if property.writable %}
        get {
            guard let cString = {{ interface.name | c_function_name(property.name, "Get") }}(handle) else {
                return ""
            }
            return String(cString: cString)
        }
        set {
            {{ interface.name | c_function_name(property.name, "Set") }}(handle, newValue)
        }
        {% else %}
        guard let cString = {{ interface.name | c_function_name(property.name, "Get") }}(handle) else {
            return ""
        }
        return String(cString: cString)
        {% endif %}
    }
    {% elif property.type | is_array %}
    {% if property.type.element_type | is_string %}
    public var {{ property.name }}: {{ property.type | swift_type }} {
        {% if property.writable %}
        get {
            let count = {{ interface.name | c_function_name(property.name + "_Count", "Get") }}(handle)
            var result: [String] = []
            result.reserveCapacity(Int(count))
            for i in 0..<count {
                if let cString = {{ interface.name | c_function_name(property.name + "_Item", "Get") }}(handle, i) {
                    result.append(String(cString: cString))
                }
            }
            return result
        }
        set {
            {{ interface.name | c_function_name(property.name + "_Clear", "Set") }}(handle)
            for item in newValue {
                {{ interface.name | c_function_name(property.name + "_Add", "Set") }}(handle, item)
            }
        }
        {% else %}
        let count = {{ interface.name | c_function_name(property.name + "_Count", "Get") }}(handle)
        var result: [String] = []
        result.reserveCapacity(Int(count))
        for i in 0..<count {
            if let cString = {{ interface.name | c_function_name(property.name + "_Item", "Get") }}(handle, i) {
                result.append(String(cString: cString))
            }
        }
        return result
        {% endif %}
    }
    {% else %}
    public var {{ property.name }}: {{ property.type | swift_type }} {
        {% if property.writable %}
        get {
            let count = {{ interface.name | c_function_name(property.name + "_Count", "Get") }}(handle)
            var result: {{ property.type | swift_type }} = []
            result.reserveCapacity(Int(count))
            for i in 0..<count {
                let item = {{ interface.name | c_function_name(property.name + "_Item", "Get") }}(handle, i)
                {% if property.type.element_type | is_interface %}
                if let itemHandle = item {
                    result.append({{ property.type.element_type | swift_type }}(handle: itemHandle))
                }
                {% else %}
                result.append(item)
                {% endif %}
            }
            return result
        }
        set {
            // TODO: Implement array setter for non-string types
        }
        {% else %}
        let count = {{ interface.name | c_function_name(property.name + "_Count", "Get") }}(handle)
        var result: {{ property.type | swift_type }} = []
        result.reserveCapacity(Int(count))
        for i in 0..<count {
            let item = {{ interface.name | c_function_name(property.name + "_Item", "Get") }}(handle, i)
            {% if property.type.element_type | is_interface %}
            if let itemHandle = item {
                result.append({{ property.type.element_type | swift_type }}(handle: itemHandle))
            }
            {% else %}
            result.append(item)
            {% endif %}
        }
        return result
        {% endif %}
    }
    {% endif %}
    {% elif property.type | is_interface %}
    {% if property.type | is_nullable %}
    public var {{ property.name }}: {{ property.type | swift_type }} {
        {% if property.writable %}
        get {
            guard let h = {{ interface.name | c_function_name(property.name, "Get") }}(handle) else {
                return nil
            }
            return {{ property.type.inner_type | swift_type }}(handle: h)
        }
        set {
            {{ interface.name | c_function_name(property.name, "Set") }}(handle, newValue?.handle)
        }
        {% else %}
        guard let h = {{ interface.name | c_function_name(property.name, "Get") }}(handle) else {
            return nil
        }
        return {{ property.type.inner_type | swift_type }}(handle: h)
        {% endif %}
    }
    {% else %}
    public var {{ property.name }}: {{ property.type | swift_type }} {
        {% if property.writable %}
        get {
            guard let h = {{ interface.name | c_function_name(property.name, "Get") }}(handle) else {
                fatalError("Non-nullable property returned null")
            }
            return {{ property.type | swift_type }}(handle: h)
        }
        set {
            {{ interface.name | c_function_name(property.name, "Set") }}(handle, newValue.handle)
        }
        {% else %}
        guard let h = {{ interface.name | c_function_name(property.name, "Get") }}(handle) else {
            fatalError("Non-nullable property returned null")
        }
        return {{ property.type | swift_type }}(handle: h)
        {% endif %}
    }
    {% endif %}
    {% else %}
    // TODO: Implement property {{ property.name }} of type {{ property.type }}
    {% endif %}
    
    {% endfor %}
    {% for method in interface.methods %}
    /// {{ method.name }} method
    {% if method.parameters | length == 0 %}
    {% if method.return_type.name == "void" %}
    public func {{ method.name }}() {
        {{ interface.name | c_function_name(method.name) }}(handle)
    }
    {% elif method.return_type | is_primitive or method.return_type | is_enum %}
    public func {{ method.name }}() -> {{ method.return_type | swift_type }} {
        return {{ interface.name | c_function_name(method.name) }}(handle)
    }
    {% elif method.return_type | is_string %}
    public func {{ method.name }}() -> {{ method.return_type | swift_type }} {
        guard let cString = {{ interface.name | c_function_name(method.name) }}(handle) else {
            return ""
        }
        return String(cString: cString)
    }
    {% elif method.return_type | is_interface %}
    {% if method.return_type | is_nullable %}
    public func {{ method.name }}() -> {{ method.return_type | swift_type }} {
        guard let h = {{ interface.name | c_function_name(method.name) }}(handle) else {
            return nil
        }
        return {{ method.return_type.inner_type | swift_type }}(handle: h)
    }
    {% else %}
    public func {{ method.name }}() -> {{ method.return_type | swift_type }} {
        guard let h = {{ interface.name | c_function_name(method.name) }}(handle) else {
            fatalError("Non-nullable return value was null")
        }
        return {{ method.return_type | swift_type }}(handle: h)
    }
    {% endif %}
    {% else %}
    // TODO: Implement method {{ method.name }} with return type {{ method.return_type }}
    {% endif %}
    {% else %}
    public func {{ method.name }}(
        {%- for param in method.parameters -%}
        {{ param.name }}: {{ param.type | swift_param_type }}
        {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ){% if method.return_type.name != "void" %} -> {{ method.return_type | swift_return_type }}{% endif %} {
        {% if method.return_type.name == "void" %}
        {{ interface.name | c_function_name(method.name) }}(
            handle
            {%- for param in method.parameters -%}
            , {{ param.name | swift_to_c_param(param.type) }}
            {%- endfor -%}
        )
        {% elif method.return_type | is_primitive or method.return_type | is_enum %}
        return {{ interface.name | c_function_name(method.name) }}(
            handle
            {%- for param in method.parameters -%}
            , {{ param.name | swift_to_c_param(param.type) }}
            {%- endfor -%}
        )
        {% elif method.return_type | is_string %}
        guard let cString = {{ interface.name | c_function_name(method.name) }}(
            handle
            {%- for param in method.parameters -%}
            , {{ param.name | swift_to_c_param(param.type) }}
            {%- endfor -%}
        ) else {
            return ""
        }
        return String(cString: cString)
        {% elif method.return_type | is_interface %}
        {% if method.return_type | is_nullable %}
        guard let h = {{ interface.name | c_function_name(method.name) }}(
            handle
            {%- for param in method.parameters -%}
            , {{ param.name | swift_to_c_param(param.type) }}
            {%- endfor -%}
        ) else {
            return nil
        }
        return {{ method.return_type.inner_type | swift_type }}(handle: h)
        {% else %}
        guard let h = {{ interface.name | c_function_name(method.name) }}(
            handle
            {%- for param in method.parameters -%}
            , {{ param.name | swift_to_c_param(param.type) }}
            {%- endfor -%}
        ) else {
            fatalError("Non-nullable return value was null")
        }
        return {{ method.return_type | swift_type }}(handle: h)
        {% endif %}
        {% else %}
        // TODO: Implement method with complex return type
        fatalError("Not implemented")
        {% endif %}
    }
    {% endif %}
    
    {% endfor %}
}

{% endfor %}