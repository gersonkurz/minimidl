// Generated by MinimIDL - C Wrapper
// DO NOT EDIT - This file was automatically generated
#pragma once

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

// Export macros
#ifdef _WIN32
    #ifdef {{ namespace.name | upper }}_EXPORTS
        #define {{ namespace | export_macro }} __declspec(dllexport)
    #else
        #define {{ namespace | export_macro }} __declspec(dllimport)
    #endif
#else
    #define {{ namespace | export_macro }} __attribute__((visibility("default")))
#endif

// Error codes
typedef enum {
    {{ namespace.name | upper }}_OK = 0,
    {{ namespace.name | upper }}_ERROR_NULL_POINTER = -1,
    {{ namespace.name | upper }}_ERROR_INVALID_HANDLE = -2,
    {{ namespace.name | upper }}_ERROR_OUT_OF_MEMORY = -3,
    {{ namespace.name | upper }}_ERROR_INVALID_INDEX = -4,
    {{ namespace.name | upper }}_ERROR_NOT_IMPLEMENTED = -5,
} {{ namespace.name }}_ErrorCode;

// Core handles
typedef void* IDynamicString_Handle;

// Forward declarations
{% for interface in namespace.interfaces %}
typedef void* {{ interface.name }}_Handle;
{% endfor %}

// Collection handles
typedef void* {{ namespace.name }}Array_Handle;
typedef void* {{ namespace.name }}Dict_Handle;
typedef void* {{ namespace.name }}Set_Handle;

{% for enum in namespace.enums %}
// {{ enum.name }} enum
typedef {{ enum.backing_type }} {{ enum.name }};
{% for value in enum.values %}
#define {{ enum.name }}_{{ value.name }} {{ value.value | render_expression }}
{% endfor %}

{% endfor %}
{% for interface in namespace.interfaces %}
// {{ interface.name }} interface
{{ namespace | export_macro }} {{ interface.name }}_Handle {{ interface.name }}_Create();
{{ namespace | export_macro }} void {{ interface.name }}_Release({{ interface.name }}_Handle handle);
{{ namespace | export_macro }} void {{ interface.name }}_AddRef({{ interface.name }}_Handle handle);

{% for property in interface.properties %}
// Property: {{ property.name }}
{% if property.type | is_primitive or property.type | is_enum %}
{{ namespace | export_macro }} {{ property.type | c_type }} {{ interface.name | c_function_name(property.name, "Get") }}({{ interface.name }}_Handle handle);
{% elif property.type | is_string %}
{{ namespace | export_macro }} IDynamicString_Handle {{ interface.name | c_function_name(property.name, "Get") }}({{ interface.name }}_Handle handle);
{% elif property.type | is_array %}
{{ namespace | export_macro }} size_t {{ interface.name | c_function_name(property.name + "_Count", "Get") }}({{ interface.name }}_Handle handle);
{% if property.type.element_type | is_string %}
{{ namespace | export_macro }} IDynamicString_Handle {{ interface.name | c_function_name(property.name + "_Item", "Get") }}({{ interface.name }}_Handle handle, size_t index);
{% else %}
{{ namespace | export_macro }} {{ property.type.element_type | c_type }} {{ interface.name | c_function_name(property.name + "_Item", "Get") }}({{ interface.name }}_Handle handle, size_t index);
{% endif %}
{% elif property.type | is_dict %}
{{ namespace | export_macro }} size_t {{ interface.name | c_function_name(property.name + "_Count", "Get") }}({{ interface.name }}_Handle handle);
{{ namespace | export_macro }} {{ namespace.name }}Dict_Handle {{ interface.name | c_function_name(property.name + "_Iterator", "Get") }}({{ interface.name }}_Handle handle);
{% elif property.type | is_set %}
{{ namespace | export_macro }} size_t {{ interface.name | c_function_name(property.name + "_Count", "Get") }}({{ interface.name }}_Handle handle);
{{ namespace | export_macro }} {{ namespace.name }}Set_Handle {{ interface.name | c_function_name(property.name + "_Iterator", "Get") }}({{ interface.name }}_Handle handle);
{% else %}
{{ namespace | export_macro }} {{ property.type | c_type }} {{ interface.name | c_function_name(property.name, "Get") }}({{ interface.name }}_Handle handle);
{% endif %}
{% if property.writable %}
{% if property.type | is_string %}
{{ namespace | export_macro }} void {{ interface.name | c_function_name(property.name, "Set") }}({{ interface.name }}_Handle handle, IDynamicString_Handle value);
{% elif property.type | is_array %}
{{ namespace | export_macro }} void {{ interface.name | c_function_name(property.name + "_Clear", "Set") }}({{ interface.name }}_Handle handle);
{% if property.type.element_type | is_string %}
{{ namespace | export_macro }} void {{ interface.name | c_function_name(property.name + "_Add", "Set") }}({{ interface.name }}_Handle handle, IDynamicString_Handle value);
{% else %}
{{ namespace | export_macro }} void {{ interface.name | c_function_name(property.name + "_Add", "Set") }}({{ interface.name }}_Handle handle, {{ property.type.element_type | c_param_type }} value);
{% endif %}
{% else %}
{{ namespace | export_macro }} void {{ interface.name | c_function_name(property.name, "Set") }}({{ interface.name }}_Handle handle, {{ property.type | c_param_type }} value);
{% endif %}
{% endif %}

{% endfor %}
{% for method in interface.methods %}
// Method: {{ method.name }}
{{ namespace | export_macro }} {{ method.return_type | c_return_type }} {{ interface.name | c_function_name(method.name) }}(
    {{ interface.name }}_Handle handle
    {%- for param in method.parameters -%}
    , {{ param.type | c_param_type }} {{ param.name }}
    {%- endfor -%}
);

{% endfor %}
{% endfor %}
// Collection iteration helpers
{{ namespace | export_macro }} void {{ namespace.name }}Array_Release({{ namespace.name }}Array_Handle handle);
{{ namespace | export_macro }} size_t {{ namespace.name }}Array_Count({{ namespace.name }}Array_Handle handle);

{{ namespace | export_macro }} void {{ namespace.name }}Dict_Release({{ namespace.name }}Dict_Handle handle);
{{ namespace | export_macro }} size_t {{ namespace.name }}Dict_Count({{ namespace.name }}Dict_Handle handle);
{{ namespace | export_macro }} bool {{ namespace.name }}Dict_Next({{ namespace.name }}Dict_Handle handle, const char** key, void** value);
{{ namespace | export_macro }} void {{ namespace.name }}Dict_Reset({{ namespace.name }}Dict_Handle handle);

{{ namespace | export_macro }} void {{ namespace.name }}Set_Release({{ namespace.name }}Set_Handle handle);
{{ namespace | export_macro }} size_t {{ namespace.name }}Set_Count({{ namespace.name }}Set_Handle handle);
{{ namespace | export_macro }} bool {{ namespace.name }}Set_Next({{ namespace.name }}Set_Handle handle, void** value);
{{ namespace | export_macro }} void {{ namespace.name }}Set_Reset({{ namespace.name }}Set_Handle handle);

// IDynamicString interface
{{ namespace | export_macro }} IDynamicString_Handle IDynamicString_Create(const char* value);
{{ namespace | export_macro }} void IDynamicString_AddRef(IDynamicString_Handle handle);
{{ namespace | export_macro }} void IDynamicString_Release(IDynamicString_Handle handle);
{{ namespace | export_macro }} const char* IDynamicString_GetValue(IDynamicString_Handle handle);
{{ namespace | export_macro }} size_t IDynamicString_GetLength(IDynamicString_Handle handle);
{{ namespace | export_macro }} void IDynamicString_SetValue(IDynamicString_Handle handle, const char* value);

// Error handling
{{ namespace | export_macro }} const char* {{ namespace.name }}_GetLastError();
{{ namespace | export_macro }} void {{ namespace.name }}_ClearError();

#ifdef __cplusplus
}
#endif