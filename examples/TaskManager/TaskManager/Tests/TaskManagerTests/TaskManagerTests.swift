// Generated by MinimIDL - Swift Unit Tests
// DO NOT EDIT - This file was automatically generated

import XCTest
@testable import TaskManager

final class TaskManagerTests: XCTestCase {
    
    override func setUp() {
        super.setUp()
        // Clear any previous errors
        clearError()
    }
    
    func testTaskCreation() throws {
        let obj = Task()
        XCTAssertNotNil(obj)
        
        // Check for creation errors
        XCTAssertNil(getLastError(), "Error creating ITask: \(getLastError() ?? "")")
    }
    
    func testTaskDescriptionProperty() throws {
        let obj = Task()
        
        // Test getter
        let initialValue = obj.description
        XCTAssertNotNil(initialValue)
        
        // Test setter
        let testString = "Test String 123"
        obj.description = testString
        XCTAssertEqual(obj.description, testString)
        
        // Test empty string
        obj.description = ""
        XCTAssertEqual(obj.description, "")
    }
    func testTaskDue_dateProperty() throws {
        let obj = Task()
        
        // Test getter
        let initialValue = obj.due_date
        XCTAssertNotNil(initialValue)
        
        // Test setter
        let testString = "Test String 123"
        obj.due_date = testString
        XCTAssertEqual(obj.due_date, testString)
        
        // Test empty string
        obj.due_date = ""
        XCTAssertEqual(obj.due_date, "")
    }
    func testTaskTagsProperty() throws {
        let obj = Task()
        
        // Test initial state
        let initialArray = obj.tags
        XCTAssertNotNil(initialArray)
        
        // Test setter with string array
        let testArray = ["item1", "item2", "item3"]
        obj.tags = testArray
        XCTAssertEqual(obj.tags, testArray)
        
        // Test empty array
        obj.tags = []
        XCTAssertEqual(obj.tags.count, 0)
    }
    
    func testTaskCompleteMethod() throws {
        let obj = Task()
        
        // Test void method
        obj.Complete()
        XCTAssertNil(getLastError(), "Error calling Complete: \(getLastError() ?? "")")
    }
    func testTaskCancelMethod() throws {
        let obj = Task()
        
        // Test void method
        obj.Cancel()
        XCTAssertNil(getLastError(), "Error calling Cancel: \(getLastError() ?? "")")
    }
    func testTaskIsOverdueMethod() throws {
        let obj = Task()
        
        // Test method with return value
        let result = obj.IsOverdue()
        XCTAssertNotNil(result)
    }
    func testTaskGetMetadataMethod() throws {
        let obj = Task()
        
    }
    func testProjectCreation() throws {
        let obj = Project()
        XCTAssertNotNil(obj)
        
        // Check for creation errors
        XCTAssertNil(getLastError(), "Error creating IProject: \(getLastError() ?? "")")
    }
    
    func testProjectNameProperty() throws {
        let obj = Project()
        
        // Test getter
        let initialValue = obj.name
        XCTAssertNotNil(initialValue)
        
        // Test setter
        let testString = "Test String 123"
        obj.name = testString
        XCTAssertEqual(obj.name, testString)
        
        // Test empty string
        obj.name = ""
        XCTAssertEqual(obj.name, "")
    }
    func testProjectDescriptionProperty() throws {
        let obj = Project()
        
        // Test getter
        let initialValue = obj.description
        XCTAssertNotNil(initialValue)
        
        // Test setter
        let testString = "Test String 123"
        obj.description = testString
        XCTAssertEqual(obj.description, testString)
        
        // Test empty string
        obj.description = ""
        XCTAssertEqual(obj.description, "")
    }
    func testProjectActiveProperty() throws {
        let obj = Project()
        
        // Test getter
        let initialValue = obj.active
        XCTAssertNotNil(initialValue)
        
        // Test setter
        let newValue: Bool = !initialValue
        obj.active = newValue
        XCTAssertEqual(obj.active, newValue)
    }
    
    func testProjectGetTasksMethod() throws {
        let obj = Project()
        
    }
    func testProjectGetTaskCountMethod() throws {
        let obj = Project()
        
        // Test method with return value
        let result = obj.GetTaskCount()
        XCTAssertNotNil(result)
    }
    func testProjectGetCompletedCountMethod() throws {
        let obj = Project()
        
        // Test method with return value
        let result = obj.GetCompletedCount()
        XCTAssertNotNil(result)
    }
    func testProjectGetTaskCountByStatusMethod() throws {
        let obj = Project()
        
    }
    func testTaskManagerCreation() throws {
        let obj = TaskManager()
        XCTAssertNotNil(obj)
        
        // Check for creation errors
        XCTAssertNil(getLastError(), "Error creating ITaskManager: \(getLastError() ?? "")")
    }
    
    
    func testTaskManagerGetProjectsMethod() throws {
        let obj = TaskManager()
        
    }
    func testTaskManagerGetActiveProjectsMethod() throws {
        let obj = TaskManager()
        
    }
    func testTaskManagerGetOverdueTasksMethod() throws {
        let obj = TaskManager()
        
    }
    func testTaskManagerGetSettingsMethod() throws {
        let obj = TaskManager()
        
    }
    
    // MARK: - Enum Tests
    
    func testPriorityEnum() throws {
        // Test all enum cases
        XCTAssertEqual(Priority.low.rawValue, 0)
        XCTAssertEqual(Priority.medium.rawValue, 1)
        XCTAssertEqual(Priority.high.rawValue, 2)
        XCTAssertEqual(Priority.urgent.rawValue, 3)
        
        // Test CaseIterable
        XCTAssertEqual(Priority.allCases.count, 4)
        
        // Test C value conversion
        let testCase = Priority.low
        let cValue = testCase.cValue
        let reconstructed = Priority(cValue: cValue)
        XCTAssertEqual(testCase, reconstructed)
    }
    func testStatusEnum() throws {
        // Test all enum cases
        XCTAssertEqual(Status.pending.rawValue, 0)
        XCTAssertEqual(Status.in_progress.rawValue, 1)
        XCTAssertEqual(Status.completed.rawValue, 2)
        XCTAssertEqual(Status.cancelled.rawValue, 3)
        
        // Test CaseIterable
        XCTAssertEqual(Status.allCases.count, 4)
        
        // Test C value conversion
        let testCase = Status.pending
        let cValue = testCase.cValue
        let reconstructed = Status(cValue: cValue)
        XCTAssertEqual(testCase, reconstructed)
    }
    
    // MARK: - Error Handling Tests
    
    func testErrorHandling() throws {
        // Clear any existing errors
        clearError()
        XCTAssertNil(getLastError())
        
        // Note: Actual error testing would require triggering error conditions
        // in the C API, which depends on the implementation
    }
}