// Generated by MinimIDL - Swift Type Definitions
// DO NOT EDIT - This file was automatically generated

import Foundation
import TaskManagerC

/// Priority enumeration
public enum Priority: Int32, CaseIterable {
    case low = 0
    case medium = 1
    case high = 2
    case urgent = 3
    
    /// Initialize from C value
    public init?(cValue: TaskManager_Priority) {
        self.init(rawValue: Int32(cValue.rawValue))
    }
    
    /// Get C value
    public var cValue: TaskManager_Priority {
        return TaskManager_Priority(rawValue: CInt(self.rawValue))!
    }
}

/// Status enumeration
public enum Status: Int32, CaseIterable {
    case pending = 0
    case in_progress = 1
    case completed = 2
    case cancelled = 3
    
    /// Initialize from C value
    public init?(cValue: TaskManager_Status) {
        self.init(rawValue: Int32(cValue.rawValue))
    }
    
    /// Get C value
    public var cValue: TaskManager_Status {
        return TaskManager_Status(rawValue: CInt(self.rawValue))!
    }
}

// MARK: - Error Handling

/// Get the last error message from the C API
public func getLastError() -> String? {
    guard let cString = TaskManager_GetLastError() else {
        return nil
    }
    let error = String(cString: cString)
    return error.isEmpty ? nil : error
}

/// Clear the last error
public func clearError() {
    TaskManager_ClearError()
}