// Generated by MinimIDL
// DO NOT EDIT - This file was automatically generated
#pragma once

#include <memory>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <cstdint>
#include "minimidl_runtime.hpp"

namespace TaskManager {

class ITask;
class IProject;

enum class Priority : int32_t {
    LOW = 0,
    MEDIUM = 1,
    HIGH = 2,
    URGENT = 3,
};

enum class Status : int32_t {
    PENDING = 0,
    IN_PROGRESS = 1,
    COMPLETED = 2,
    CANCELLED = 3,
};



class ITask {
public:
    virtual ~ITask() = default;
    
    virtual std::string get_id() const = 0;
    virtual std::string get_title() const = 0;
    virtual std::string get_created_at() const = 0;
    virtual std::string get_description() const = 0;
    virtual void set_description(const std::string& value) = 0;
    virtual Priority get_priority() const = 0;
    virtual void set_priority(const Priority& value) = 0;
    virtual Status get_status() const = 0;
    virtual void set_status(const Status& value) = 0;
    virtual std::string get_due_date() const = 0;
    virtual void set_due_date(const std::string& value) = 0;
    virtual std::vector<std::string> get_tags() const = 0;
    virtual void set_tags(const std::vector<std::string>& value) = 0;
    
    virtual void Complete() = 0;
    virtual void Cancel() = 0;
    virtual bool IsOverdue() = 0;
    virtual std::unordered_map<std::string, std::string> GetMetadata() = 0;
    virtual void SetMetadata(const std::string& key, const std::string& value) = 0;
};

class IProject {
public:
    virtual ~IProject() = default;
    
    virtual std::string get_id() const = 0;
    virtual std::string get_name() const = 0;
    virtual void set_name(const std::string& value) = 0;
    virtual std::string get_description() const = 0;
    virtual void set_description(const std::string& value) = 0;
    virtual bool get_active() const = 0;
    virtual void set_active(bool value) = 0;
    
    virtual ITask CreateTask(const std::string& title, const std::string& description) = 0;
    virtual std::shared_ptr<ITask> GetTask(const std::string& taskId) = 0;
    virtual std::vector<ITask> GetTasks() = 0;
    virtual std::vector<ITask> GetTasksByStatus(const Status& status) = 0;
    virtual bool DeleteTask(const std::string& taskId) = 0;
    virtual int32_t GetTaskCount() = 0;
    virtual int32_t GetCompletedCount() = 0;
    virtual std::unordered_map<std::string, int32_t> GetTaskCountByStatus() = 0;
};

class ITaskManager {
public:
    virtual ~ITaskManager() = default;
    
    
    virtual IProject CreateProject(const std::string& name) = 0;
    virtual std::shared_ptr<IProject> GetProject(const std::string& projectId) = 0;
    virtual std::vector<IProject> GetProjects() = 0;
    virtual std::vector<IProject> GetActiveProjects() = 0;
    virtual bool DeleteProject(const std::string& projectId) = 0;
    virtual std::vector<ITask> SearchTasks(const std::string& query) = 0;
    virtual std::vector<ITask> GetTasksByPriority(const Priority& priority) = 0;
    virtual std::vector<ITask> GetOverdueTasks() = 0;
    virtual std::unordered_map<std::string, std::string> GetSettings() = 0;
    virtual void UpdateSettings(const std::unordered_map<std::string, std::string>& settings) = 0;
    virtual void Save(const std::string& path) = 0;
    virtual void Load(const std::string& path) = 0;
};

} // namespace TaskManager
