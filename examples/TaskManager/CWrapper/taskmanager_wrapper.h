// Generated by MinimIDL - C Wrapper
// DO NOT EDIT - This file was automatically generated
#pragma once

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

// Export macros
#ifdef _WIN32
    #ifdef TASKMANAGER_EXPORTS
        #define TASKMANAGER_API __declspec(dllexport)
    #else
        #define TASKMANAGER_API __declspec(dllimport)
    #endif
#else
    #define TASKMANAGER_API __attribute__((visibility("default")))
#endif

// Error codes
typedef enum {
    TASKMANAGER_OK = 0,
    TASKMANAGER_ERROR_NULL_POINTER = -1,
    TASKMANAGER_ERROR_INVALID_HANDLE = -2,
    TASKMANAGER_ERROR_OUT_OF_MEMORY = -3,
    TASKMANAGER_ERROR_INVALID_INDEX = -4,
    TASKMANAGER_ERROR_NOT_IMPLEMENTED = -5,
} TaskManager_ErrorCode;

// Forward declarations
typedef void* ITask_Handle;
typedef void* IProject_Handle;
typedef void* ITaskManager_Handle;

// Collection handles
typedef void* TaskManagerArray_Handle;
typedef void* TaskManagerDict_Handle;
typedef void* TaskManagerSet_Handle;

// Priority enum
typedef int32_t Priority;
#define Priority_LOW 0
#define Priority_MEDIUM 1
#define Priority_HIGH 2
#define Priority_URGENT 3

// Status enum
typedef int32_t Status;
#define Status_PENDING 0
#define Status_IN_PROGRESS 1
#define Status_COMPLETED 2
#define Status_CANCELLED 3

// ITask interface
TASKMANAGER_API ITask_Handle ITask_Create();
TASKMANAGER_API void ITask_Release(ITask_Handle handle);
TASKMANAGER_API void ITask_AddRef(ITask_Handle handle);

// Property: id
TASKMANAGER_API const char* ITask_Getid(ITask_Handle handle);

// Property: title
TASKMANAGER_API const char* ITask_Gettitle(ITask_Handle handle);

// Property: created_at
TASKMANAGER_API const char* ITask_Getcreated_at(ITask_Handle handle);

// Property: description
TASKMANAGER_API const char* ITask_Getdescription(ITask_Handle handle);
TASKMANAGER_API void ITask_Setdescription(ITask_Handle handle, const char* value);

// Property: priority
TASKMANAGER_API Priority ITask_Getpriority(ITask_Handle handle);
TASKMANAGER_API void ITask_Setpriority(ITask_Handle handle, Priority value);

// Property: status
TASKMANAGER_API Status ITask_Getstatus(ITask_Handle handle);
TASKMANAGER_API void ITask_Setstatus(ITask_Handle handle, Status value);

// Property: due_date
TASKMANAGER_API const char* ITask_Getdue_date(ITask_Handle handle);
TASKMANAGER_API void ITask_Setdue_date(ITask_Handle handle, const char* value);

// Property: tags
TASKMANAGER_API size_t ITask_Gettags_Count(ITask_Handle handle);
TASKMANAGER_API const char* ITask_Gettags_Item(ITask_Handle handle, size_t index);
TASKMANAGER_API void ITask_Settags_Clear(ITask_Handle handle);
TASKMANAGER_API void ITask_Settags_Add(ITask_Handle handle, const char* value);

// Method: Complete
TASKMANAGER_API void ITask_Complete(
    ITask_Handle handle);

// Method: Cancel
TASKMANAGER_API void ITask_Cancel(
    ITask_Handle handle);

// Method: IsOverdue
TASKMANAGER_API bool ITask_IsOverdue(
    ITask_Handle handle);

// Method: GetMetadata
TASKMANAGER_API TaskManagerDict_Handle ITask_GetMetadata(
    ITask_Handle handle);

// Method: SetMetadata
TASKMANAGER_API void ITask_SetMetadata(
    ITask_Handle handle, const char* key, const char* value);

// IProject interface
TASKMANAGER_API IProject_Handle IProject_Create();
TASKMANAGER_API void IProject_Release(IProject_Handle handle);
TASKMANAGER_API void IProject_AddRef(IProject_Handle handle);

// Property: id
TASKMANAGER_API const char* IProject_Getid(IProject_Handle handle);

// Property: name
TASKMANAGER_API const char* IProject_Getname(IProject_Handle handle);
TASKMANAGER_API void IProject_Setname(IProject_Handle handle, const char* value);

// Property: description
TASKMANAGER_API const char* IProject_Getdescription(IProject_Handle handle);
TASKMANAGER_API void IProject_Setdescription(IProject_Handle handle, const char* value);

// Property: active
TASKMANAGER_API bool IProject_Getactive(IProject_Handle handle);
TASKMANAGER_API void IProject_Setactive(IProject_Handle handle, bool value);

// Method: CreateTask
TASKMANAGER_API ITask_Handle IProject_CreateTask(
    IProject_Handle handle, const char* title, const char* description);

// Method: GetTask
TASKMANAGER_API ITask_Handle IProject_GetTask(
    IProject_Handle handle, const char* taskId);

// Method: GetTasks
TASKMANAGER_API TaskManagerArray_Handle IProject_GetTasks(
    IProject_Handle handle);

// Method: GetTasksByStatus
TASKMANAGER_API TaskManagerArray_Handle IProject_GetTasksByStatus(
    IProject_Handle handle, Status status);

// Method: DeleteTask
TASKMANAGER_API bool IProject_DeleteTask(
    IProject_Handle handle, const char* taskId);

// Method: GetTaskCount
TASKMANAGER_API int32_t IProject_GetTaskCount(
    IProject_Handle handle);

// Method: GetCompletedCount
TASKMANAGER_API int32_t IProject_GetCompletedCount(
    IProject_Handle handle);

// Method: GetTaskCountByStatus
TASKMANAGER_API TaskManagerDict_Handle IProject_GetTaskCountByStatus(
    IProject_Handle handle);

// ITaskManager interface
TASKMANAGER_API ITaskManager_Handle ITaskManager_Create();
TASKMANAGER_API void ITaskManager_Release(ITaskManager_Handle handle);
TASKMANAGER_API void ITaskManager_AddRef(ITaskManager_Handle handle);

// Method: CreateProject
TASKMANAGER_API IProject_Handle ITaskManager_CreateProject(
    ITaskManager_Handle handle, const char* name);

// Method: GetProject
TASKMANAGER_API IProject_Handle ITaskManager_GetProject(
    ITaskManager_Handle handle, const char* projectId);

// Method: GetProjects
TASKMANAGER_API TaskManagerArray_Handle ITaskManager_GetProjects(
    ITaskManager_Handle handle);

// Method: GetActiveProjects
TASKMANAGER_API TaskManagerArray_Handle ITaskManager_GetActiveProjects(
    ITaskManager_Handle handle);

// Method: DeleteProject
TASKMANAGER_API bool ITaskManager_DeleteProject(
    ITaskManager_Handle handle, const char* projectId);

// Method: SearchTasks
TASKMANAGER_API TaskManagerArray_Handle ITaskManager_SearchTasks(
    ITaskManager_Handle handle, const char* query);

// Method: GetTasksByPriority
TASKMANAGER_API TaskManagerArray_Handle ITaskManager_GetTasksByPriority(
    ITaskManager_Handle handle, Priority priority);

// Method: GetOverdueTasks
TASKMANAGER_API TaskManagerArray_Handle ITaskManager_GetOverdueTasks(
    ITaskManager_Handle handle);

// Method: GetSettings
TASKMANAGER_API TaskManagerDict_Handle ITaskManager_GetSettings(
    ITaskManager_Handle handle);

// Method: UpdateSettings
TASKMANAGER_API void ITaskManager_UpdateSettings(
    ITaskManager_Handle handle, TaskManagerDict_Handle settings);

// Method: Save
TASKMANAGER_API void ITaskManager_Save(
    ITaskManager_Handle handle, const char* path);

// Method: Load
TASKMANAGER_API void ITaskManager_Load(
    ITaskManager_Handle handle, const char* path);

// Collection iteration helpers
TASKMANAGER_API void TaskManagerArray_Release(TaskManagerArray_Handle handle);
TASKMANAGER_API size_t TaskManagerArray_Count(TaskManagerArray_Handle handle);

TASKMANAGER_API void TaskManagerDict_Release(TaskManagerDict_Handle handle);
TASKMANAGER_API size_t TaskManagerDict_Count(TaskManagerDict_Handle handle);
TASKMANAGER_API bool TaskManagerDict_Next(TaskManagerDict_Handle handle, const char** key, void** value);
TASKMANAGER_API void TaskManagerDict_Reset(TaskManagerDict_Handle handle);

TASKMANAGER_API void TaskManagerSet_Release(TaskManagerSet_Handle handle);
TASKMANAGER_API size_t TaskManagerSet_Count(TaskManagerSet_Handle handle);
TASKMANAGER_API bool TaskManagerSet_Next(TaskManagerSet_Handle handle, void** value);
TASKMANAGER_API void TaskManagerSet_Reset(TaskManagerSet_Handle handle);

// Error handling
TASKMANAGER_API const char* TaskManager_GetLastError();
TASKMANAGER_API void TaskManager_ClearError();

#ifdef __cplusplus
}
#endif